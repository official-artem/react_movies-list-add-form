{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","invalidParams","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","defaultValue","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isFormFilled","trim","isValidParams","match","handleSubmit","currentCount","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","currentMovies","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56a10ae0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const invalidParams = value === 'Invalid URL';\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || invalidParams,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {invalidParams && (\n        <p className=\"help is-danger\">`Please pass valid URL`</p>\n      )}\n    </div>\n  );\n};\n","import { FC, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const defaultValue = '';\n\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState(defaultValue);\n  const [description, setDescription] = useState(defaultValue);\n  const [imgUrl, setImgUrl] = useState(defaultValue);\n  const [imdbUrl, setImdbUrl] = useState(defaultValue);\n  const [imdbId, setImdbId] = useState(defaultValue);\n\n  const isFormFilled\n     = title.trim() && imgUrl.trim() && imdbUrl.trim() && imdbId.trim();\n\n  const isValidParams = (value: string): boolean => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return !!value.match(pattern);\n  };\n\n  const increaseCountofMovies = () => {\n    setCount(currentCount => currentCount + 1);\n  };\n\n  const clearForm = () => {\n    setTitle(defaultValue);\n    setDescription(defaultValue);\n    setImgUrl(defaultValue);\n    setImdbUrl(defaultValue);\n    setImdbId(defaultValue);\n  };\n\n  const handleSubmit = () => {\n    increaseCountofMovies();\n\n    if (!isValidParams(imgUrl)) {\n      setImgUrl('Invalid URL');\n\n      return;\n    }\n\n    if (!isValidParams(imdbUrl)) {\n      setImdbUrl('Invalid URL');\n\n      return;\n    }\n\n    if (isFormFilled) {\n      const newMovie: Movie = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      onAdd(newMovie);\n\n      clearForm();\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        handleSubmit();\n      }}\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(event) => {\n          setTitle(event);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(event) => {\n          setDescription(event);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(event) => {\n          setImgUrl(event);\n        }}\n        required\n\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(event) => {\n          setImdbUrl(event);\n        }}\n        required\n\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(event) => {\n          setImdbId(event);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => {\n          addMovie(movie);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}